{"version":3,"sources":["HeaderMenu.js","Cards.js","data/rectangle_java.jpg","data/rectangle_python.jpg","data/rectangle_scala.jpg","data/vehicle_java.jpg","data/vehicle_python.jpg","data/vehicle_scala.jpg","data/q1.jpg","data/q2.jpg","CartesianPlot.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderMenu","props","state","data","menuData","lang","Object","keys","id","benchmarkToggle","benchmarkIndex","changeData","bind","this","setState","prev","current","console","log","value","changeID","mutateMenu","langList","randLang","Math","floor","random","length","randIndex","randBenchmarkIndex","className","classNames","type","data-toggle","map","index","onClick","changeLanguage","href","style","background","selectRandomUser","getToggleBg","toggleBenchMark","changeBenchmark","React","Component","labelsAll","initLabels","labels","filterList","filter","item","includes","Cards","coordinates","benchmark","Table","hover","striped","changeCardBg","changeCardBg1","CartesianPlot","transformData","benchmarkData","imagePath","img1","lineType","selectData","mutateData","tempObj1","tempObj2","rectangleData","vehicleData","temp1","temp2","i","push","prevProps","makePath","e","preventDefault","color","pt","img4","img5","img6","img2","img3","img7","img8","backgroundImage","width","height","margin","right","bottom","left","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","name","domain","tickCount","unit","dot","fillOpacity","stroke","strokeWidth","payload","populateLegend","Button","variant","changeIndex","changeLineType","changedData","data250","indexMap","Array","fill","languages","itr","indexOf","initIndexMap","langSet","Set","experiment_language","add","str","from","initMenuItems","App","dataSource","cardData","cartesianPlotData","rectangle_java","vehicle_java","LoadDataFromMenu","LoadDataFromPlotMenuAgain","selectDataFromPlotMenu","data150","data50","switchData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cd4856b.chunk.js","sourcesContent":["import React from 'react';\nimport './headerStyle.css'\nimport classNames from 'classnames';\n\nclass HeaderMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data.menuData,\n            lang: Object.keys(this.props.data.menuData)[0],\n            id: 200,\n            benchmarkToggle: this.props.data.benchmarkToggle,\n            benchmarkIndex: 200,\n        }\n        // console.log(this.state.data);\n        this.changeData = this.changeData.bind(this);\n    }\n\n    toggleBenchMark() {\n        this.setState((prev, current) => ({\n            benchmarkToggle: !this.state.benchmarkToggle,\n        }), () => {\n            console.log(\"BenchMark :\", this.state.benchmarkToggle);\n            this.changeData();\n        });\n    }\n\n\n    changeLanguage(value) {\n        this.setState((prev, current) => ({\n            lang: value,\n        }), () => {\n            this.changeID(this.state.data[this.state.lang][0])\n            console.log(\"Language changed to :\", this.state.lang);\n        });\n    }\n\n    changeID(value) {\n        this.setState((prev, current) => ({\n            id: value,\n        }), () => {\n            console.log(\"ID changed  to :\", this.state.id);\n        });\n    }\n\n    changeBenchmark(value) {\n        this.setState((prev, current) => ({\n            benchmarkIndex: value,\n        }), () => {\n            console.log(\"Benchmark Index changed :\", this.state.benchmarkIndex);\n            this.changeData();\n        });\n    }\n\n    changeData() {\n        let value = {\n            \"lang\": this.state.lang,\n            \"id\": this.state.id,\n            \"benchmarkToggle\": this.state.benchmarkToggle,\n            \"benchmarkIndex\": this.state.benchmarkIndex\n        }\n        this.props.mutateMenu(value);\n    }\n\n    getToggleBg() {\n        return !this.state.benchmarkToggle ? \"#9a1111\" : \"rgb(105 150 85)\";\n    }\n\n    selectRandomUser() {\n        let langList = Object.keys(this.state.data);\n        let randLang = langList[Math.floor(Math.random() * langList.length)];\n        let randIndex = Math.floor(Math.random() * this.state.data[randLang].length);\n        let randBenchmarkIndex = Math.floor(Math.random() * this.state.data[randLang].length);\n        while (randBenchmarkIndex === randIndex) {\n            randBenchmarkIndex = Math.floor(Math.random() * this.state.data[randLang].length);\n        }\n        this.setState((prev, current) => ({\n            lang: randLang,\n            id: this.props.data.menuData[randLang][randIndex],\n            benchmarkIndex: this.props.data.menuData[randLang][randBenchmarkIndex]\n        }), () => {\n            console.log(\"Random User Selected :\", \"id:\", this.state.id, \"lang:\", randLang, \"Benchmark Index:\", this.state.benchmarkIndex);\n            this.changeData();\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"header\"}>\n                    <div className={classNames(\"title\")}>\n                        Eye Movement in Programming\n                    </div>\n                    <div className={\"menu\"}>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle newbtn\" type=\"button\"\n                                        data-toggle=\"dropdown\"> {this.state.lang}\n                                    </button>\n                                <ul className=\"dropdown-menu\">\n                                    {Object.keys(this.state.data).map((value, index) => {\n                                        return <li key={value} onClick={() => this.changeLanguage(value)}><a\n                                            href={\"#\"}>{value}</a>\n                                        </li>\n                                    })}\n                                </ul>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle newbtn\" type=\"button\"\n                                        data-toggle=\"dropdown\"> {this.state.id}\n                                    </button>\n                                <ul className=\"dropdown-menu\">\n                                    {this.props.data.menuData[this.state.lang].map((value) => {\n                                        return <li key={value} onClick={() => this.changeID(value)}><a\n                                            href={\"#\"}>{value}</a></li>\n                                    })}\n                                </ul>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle newbtn\" type=\"button\"\n                                        style={{background: \"rgb(105 150 85)\"}}\n                                        data-toggle=\"dropdown\" onClick={() => this.changeData()}> GO\n                                </button>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary\" type=\"button\"\n                                        data-toggle=\"dropdown\" onClick={() => this.selectRandomUser()}>Random User\n                                </button>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary newbtn\" type=\"button\"\n                                        data-toggle=\"dropdown\"\n                                        style={{background: this.getToggleBg()}}\n                                        onClick={() => this.toggleBenchMark()}>Benchmark Toggle\n                                </button>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle newbtn\" type=\"button\"\n                                        data-toggle=\"dropdown\"> {this.state.benchmarkIndex}\n                                    </button>\n                                <ul className=\"dropdown-menu\">\n                                    {this.props.data.menuData[this.state.lang].map((value) => {\n                                        return <li key={value} onClick={() => this.changeBenchmark(value)}><a\n                                            href={\"#\"}>{value}</a></li>\n                                    })}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HeaderMenu;\n","import React from 'react';\nimport './cardStyle.css';\nimport Table from 'react-bootstrap/Table';\n\n\nlet labelsAll = [];\n\nfunction initLabels(value) {\n    let labels = Object.keys(value);\n    let filterList = [\"vehicle_java\", \"rectangle_java\", \"time_experiment_language\", \"answer_rectangle\", \"answer_vehicle\", \"makeup\", \"stimulus_rectangle\", \"stimulus_vehicle\", \"time_experiment_language_original\", \"frequency_experiment_language\", \"other_languages_original\", \"frequency_other_language\"]\n    labels = labels.filter(item => (!filterList.includes(item)));\n    labelsAll = labels;\n    return labels;\n}\n\nclass Cards extends React.Component {\n    static getDerivedStateFromProps(props, state) {\n        if (props !== state) {\n            return {\n                data: props.data\n            };\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data.coordinates,\n            benchmark: this.props.data.benchmark,\n            labels: initLabels(this.props.data.coordinates)\n        }\n    }\n\n    changeCardBg(value) {\n        if (value === 'correct_vehicle' || value === 'correct_rectangle') {\n            if (this.state.data.coordinates[value] === 1) {\n                return \"linear-gradient(to right, #76b852, #76b852)\";\n            } else {\n                return \"linear-gradient(to right, #ed213a, #ed213a)\";\n            }\n        }\n        return null;\n    }\n\n    changeCardBg1(value) {\n        if (value === 'correct_vehicle' || value === 'correct_rectangle') {\n            if (this.state.data.benchmark[value] === 1) {\n                return \"linear-gradient(to right, #76b852, #76b852)\";\n            } else {\n                return \"linear-gradient(to right, #ed213a, #ed213a)\";\n            }\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <>\n                <div className={\"tableCSS\"}>\n                    <Table hover striped={true}>\n                        <thead>\n                        <tr>\n                            <th>Metadata</th>\n                            <th>Current</th>\n                            <th>BenchMark</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {labelsAll.map((value, index) => {\n                            return (\n                                <tr key={index}>\n                                    <td>{value}</td>\n                                    <td style={{background: this.changeCardBg(value)}} key={value}>\n                                        {this.state.data.coordinates[value]}</td>\n                                    <td style={{background: this.changeCardBg1(value)}} key={value}>\n                                        {this.state.data.benchmark[value]}</td>\n                                </tr>\n                            )\n                        })}\n                        </tbody>\n                    </Table>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Cards;","export default __webpack_public_path__ + \"static/media/rectangle_java.40b79f4b.jpg\";","export default __webpack_public_path__ + \"static/media/rectangle_python.4d3d7e86.jpg\";","export default __webpack_public_path__ + \"static/media/rectangle_scala.5faf29cf.jpg\";","export default __webpack_public_path__ + \"static/media/vehicle_java.2087cc3c.jpg\";","export default __webpack_public_path__ + \"static/media/vehicle_python.2801df76.jpg\";","export default __webpack_public_path__ + \"static/media/vehicle_scala.f5795ee7.jpg\";","export default __webpack_public_path__ + \"static/media/q1.1a599f49.jpg\";","export default __webpack_public_path__ + \"static/media/q2.ce231d09.jpg\";","import React from 'react';\nimport './cartesianPlotStyle.css';\nimport img1 from './data/rectangle_java.jpg';\nimport img2 from './data/rectangle_python.jpg';\nimport img3 from './data/rectangle_scala.jpg';\nimport img4 from './data/vehicle_java.jpg';\nimport img5 from './data/vehicle_python.jpg';\nimport img6 from './data/vehicle_scala.jpg';\nimport img7 from './data/q1.jpg';\nimport img8 from './data/q2.jpg';\nimport Button from 'react-bootstrap/Button'\nimport {\n    XAxis, YAxis, CartesianGrid, Line, ComposedChart\n} from 'recharts';\nimport Legend from \"recharts/lib/component/Legend\";\n\nclass CartesianPlot extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.transformData(this.props.data.coordinates),\n            benchmarkData: this.transformData(this.props.data.benchmark),\n            lang: this.props.data.lang,\n            index: 0,\n            imagePath: img1,\n            lineType: \"monotone\",\n            benchmarkToggle: this.props.data.benchmarkToggle\n        }\n        this.selectData = this.selectData.bind(this);\n        // console.log(this.state.data);\n    }\n\n    selectData(value) {\n        this.props.mutateData(value);\n    }\n\n    transformData(data) {\n        let rectangleData = [], vehicleData = [];\n        let temp1 = data[0], temp2 = data[1];\n        let length = temp1['LX'].length;\n        let tempObj1, tempObj2;\n        for (let i = 0; i < length; i++) {\n            tempObj1 = {\n                \"LX\": temp1[\"LX\"][i],\n                \"LY\": temp1[\"LY\"][i],\n            }\n            tempObj2 = {\n                \"LX\": temp2[\"LX\"][i],\n                \"LY\": temp2[\"LY\"][i],\n            }\n            rectangleData.push(tempObj1);\n            vehicleData.push(tempObj2);\n        }\n        // console.log([rectangleData, vehicleData]);\n        return [rectangleData, vehicleData];\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.data !== this.props.data) {\n            this.setState((prev, current) => ({\n                data: this.transformData(this.props.data.coordinates),\n                benchmarkData: this.transformData(this.props.data.benchmark),\n                lang: this.props.data.lang,\n                benchmarkToggle: this.props.data.benchmarkToggle\n            }), () => {\n                this.setState((prev, current) => ({\n                    imagePath: this.makePath()\n                }), () => {\n                    console.log(\"Data changed in cartesian plot\", this.state.lang, this.state.imagePath);\n                })\n            });\n        }\n    }\n\n    changeLineType(e, value) {\n        e.preventDefault();\n        this.setState((prev, current) => ({\n            lineType: value,\n        }), () => {\n            console.log(\"Line Type changed to:\", this.state.lineType);\n        });\n    }\n\n    changeIndex(e, value) {\n        e.preventDefault();\n        this.setState((prev, current) => ({\n            index: value,\n        }), () => {\n            this.setState((prev, current) => ({\n                imagePath: this.makePath()\n            }), () => {\n                console.log(\"Button changed index to :\", this.state.index);\n            })\n\n        });\n    }\n\n    populateLegend() {\n        if (this.state.benchmarkToggle) {\n            return [\n                {id: 'LY', value: 'Benchmark', type: 'line', color: \"rgb(255 204 204)\"},\n                {id: 'LY', value: 'Current', type: 'line', color: '#82ca9d'},\n            ]\n        } else {\n            return [\n                {id: 'LY', value: 'Current', type: 'line', color: '#82ca9d'},\n            ]\n        }\n    }\n\n    makePath() {\n        let pt;\n        if (this.state.index === 1) {\n            switch (this.state.lang) {\n                default :\n                    pt = img4;\n                    break;\n                case \"Python\":\n                    pt = img5;\n                    break;\n                case \"Scala\":\n                    pt = img6;\n                    break;\n            }\n        } else if (this.state.index === 0) {\n            switch (this.state.lang) {\n                default :\n                    pt = img1;\n                    break;\n                case \"Python\":\n                    pt = img2;\n                    break;\n                case \"Scala\":\n                    pt = img3;\n                    break;\n            }\n        } else if (this.state.index === 2) {\n            pt = img7;\n        } else {\n            pt = img8;\n        }\n        return pt;\n    }\n\n    render() {\n        return (\n            <>\n                <div className={\"plotDiv\"} style={{backgroundImage: `url(${this.state.imagePath})`}}>\n                    <ComposedChart\n                        width={1060}\n                        height={605}\n                        margin={{\n                            right: 20, bottom: 20, left: 10,\n                        }}\n                    >\n                        <defs>\n                            <linearGradient id=\"colorUv\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                                <stop offset=\"0%\" stopColor=\"blue\" stopOpacity={0.5}/>\n                                <stop offset=\"10%\" stopColor=\"green\" stopOpacity={0.5}/>\n                                <stop offset=\"100%\" stopColor=\"blue\" stopOpacity={0.5}/>\n                            </linearGradient>\n                            <linearGradient id=\"colorUv1\" x1=\"50%\" y1=\"0%\" x2=\"0%\" y2=\"50%\">\n                                {/*<stop offset=\"0%\" stopColor=\"blue\" stopOpacity={0.2}/>*/}\n                                {/*<stop offset=\"10%\" stopColor=\"green\" stopOpacity={0.2}/>*/}\n                                <stop offset=\"100%\" stopColor=\"red\" stopOpacity={0.2}/>\n                            </linearGradient>\n                        </defs>\n                        <CartesianGrid/>\n                        <XAxis type=\"number\" dataKey=\"LX\" name=\"stature\" domain={[0, 1920]} tickCount={10} unit={'px'}/>\n                        <YAxis type=\"number\" dataKey=\"LY\" name=\"weight\" domain={[0, 1080]} tickCount={10} unit={'px'}/>\n                        <Line\n                            type={this.state.lineType}\n                            dataKey=\"LY\"\n                            dot={false}\n                            fillOpacity={1}\n                            stroke=\"url(#colorUv)\"\n                            strokeWidth={1.5}\n                            data={this.state.data[this.state.index]}\n                        />\n                        <Legend payload={this.populateLegend()}/>\n                        s{this.state.benchmarkToggle && <Line\n                        type={this.state.lineType}\n                        dataKey=\"LY\"\n                        dot={false}\n                        data={this.state.benchmarkData[this.state.index]}\n                        stroke=\"url(#colorUv1)\"\n                        strokeWidth={1.5}\n                    />}\n                        {/*<Tooltip/>*/}\n                    </ComposedChart>\n                    <div className={\"buttonHeading\"}>\n                        Select Image\n                        <div className={\"buttonHeadingLineFunctions\"}>\n                            Select Line Function\n                        </div>\n                        <div className={\"buttonHeadingData\"}>\n                            Select Data Sample Rate\n                        </div>\n                    </div>\n                    <div className={\"buttonDiv\"}>\n                        <hr/>\n                        <Button variant=\"primary\" onClick={e => this.changeIndex(e, 0)}>Rectangle</Button> {}\n                        <Button variant=\"primary\" onClick={e => this.changeIndex(e, 1)}>Vehicle</Button> {}\n                        <Button variant=\"primary\" onClick={e => this.changeIndex(e, 2)}>Q. Rectangle</Button> {}\n                        <Button variant=\"primary\" onClick={e => this.changeIndex(e, 3)}>Q. Vehicle</Button> {}\n                        <div className={\"lineTypeButtons\"}>\n                            <Button variant=\"primary\"\n                                    onClick={e => this.changeLineType(e, \"monotone\")}>Monotone</Button> {}\n                            <Button variant=\"primary\" onClick={e => this.changeLineType(e, \"linear\")}>Linear</Button> {}\n                            <Button variant=\"primary\"\n                                    onClick={e => this.changeLineType(e, \"linearClosed\")}>LinearClosed</Button> {}\n                            <Button variant=\"primary\" onClick={e => this.changeLineType(e, \"step\")}>Step</Button> {}\n                        </div>\n                        <br/><br/>\n                        <hr/>\n                        <div className={\"dataSetButtons\"}>\n                            <Button variant=\"primary\"\n                                    onClick={e => this.selectData(\"data50\")}>Data 50</Button> {}\n                            <Button variant=\"primary\" onClick={e => this.selectData(\"data150\")}>Data 150</Button> {}\n                            <Button variant=\"primary\"\n                                    onClick={e => this.selectData(\"data250\")}>Data 250</Button> {}\n                            <Button variant=\"primary\" style={{background: \"rgb(105 150 85)\"}}\n                                    onClick={e => this.props.changedData(e)}>Go</Button> {}\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default CartesianPlot;\n","import './App.css';\nimport React from 'react';\nimport data50 from './data/data_emip_50.json';\nimport data150 from './data/data_emip_150.json';\nimport data250 from './data/data_emip_250.json';\nimport HeaderMenu from \"./HeaderMenu\";\nimport Cards from \"./Cards\";\nimport CartesianPlot from \"./CartesianPlot\";\n\nlet data = data250;\n\nlet indexMap = new Array(data.length + 10).fill(0);\n// Language Options\nlet languages = {}\n\nfunction initIndexMap() {\n    for (let itr of data) {\n        indexMap[itr.id] = data.indexOf(itr)\n    }\n}\n\nfunction initMenuItems() {\n    let langSet = new Set();\n    for (let itr of data) {\n        if (itr.experiment_language in languages)\n            languages[itr.experiment_language].add(data.indexOf(itr));\n        else\n            languages[itr.experiment_language] = new Set()\n        langSet.add(itr.experiment_language);\n    }\n    for (let str in languages) {\n        languages[str] = Array.from(languages[str]);\n    }\n    // console.log(languages);\n}\n\n\nfunction init() {\n    initIndexMap();\n    initMenuItems();\n    // console.log(data);\n}\n\ninit();\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menuData: languages,\n            dataSource: 'data250',\n            lang: \"Java\",\n            id: 0,\n            index: 0,\n            benchmarkIndex: 200,\n            cardData: {\n                \"coordinates\": data[indexMap[200]],\n                \"benchmark\": data[indexMap[200]],\n            },\n            benchmarkToggle: false,\n            cartesianPlotData: {\n                \"coordinates\": [data[indexMap[200]].rectangle_java, data[indexMap[200]].vehicle_java],\n                \"benchmark\": [data[indexMap[200]].rectangle_java, data[indexMap[200]].vehicle_java],\n                \"lang\": \"Java\",\n                \"benchmarkToggle\": false,\n            }\n        };\n        this.LoadDataFromMenu = this.LoadDataFromMenu.bind(this);\n        this.LoadDataFromPlotMenuAgain = this.LoadDataFromPlotMenuAgain.bind(this);\n        this.selectDataFromPlotMenu = this.selectDataFromPlotMenu.bind(this);\n        // console.log(this.state);\n\n    }\n\n    LoadDataFromMenu(value) {\n        console.log(\"Sent from Menu\", value);\n        this.setState((prev, current) => ({\n            lang: value.lang,\n            id: value.id,\n            index: value.id,\n            benchmarkToggle: value.benchmarkToggle,\n            benchmarkIndex: value.benchmarkIndex\n        }), () => {\n            console.log(\"Parent state changed by Menu :\", value, \"index:\", this.state.index);\n            this.setState((prev, current) => ({\n                cardData: {\n                    \"coordinates\": data[indexMap[this.state.index]],\n                    \"benchmark\": data[indexMap[this.state.benchmarkIndex]],\n                },\n                cartesianPlotData: {\n                    \"coordinates\": [data[indexMap[this.state.index]].rectangle_java, data[indexMap[this.state.index]].vehicle_java],\n                    \"benchmark\": [data[indexMap[this.state.benchmarkIndex]].rectangle_java, data[indexMap[this.state.benchmarkIndex]].vehicle_java],\n                    \"lang\": this.state.lang,\n                    \"benchmarkToggle\": this.state.benchmarkToggle,\n                    \"benchmarkIndex\": this.state.benchmarkIndex\n                }\n            }), () => {\n                console.log(\"Card data changed by Menu :\", value, \"index:\", this.state.cardData, \"toggle\", this.state.benchmarkToggle);\n            });\n        });\n    }\n\n    LoadDataFromPlotMenuAgain(e) {\n        e.preventDefault();\n        // console.log(\"Sent from Menu\", value);\n        // languages[\"benchmarkToggle\"] = false;\n        this.setState((prev, current) => ({\n            cardData: {\n                \"coordinates\": data[indexMap[this.state.index]],\n                \"benchmark\": data[indexMap[this.state.benchmarkIndex]],\n            },\n            benchmarkToggle: true,\n            cartesianPlotData: {\n                \"coordinates\": [data[indexMap[this.state.index]].rectangle_java, data[indexMap[this.state.index]].vehicle_java],\n                \"benchmark\": [data[indexMap[this.state.benchmarkIndex]].rectangle_java, data[indexMap[this.state.benchmarkIndex]].vehicle_java],\n                \"lang\": this.state.lang\n            }\n        }), () => {\n            console.log(this.state.benchmarkToggle);\n        });\n    }\n\n    switchData() {\n        switch (this.state.dataSource) {\n            default:\n                data = data250;\n                break;\n            case \"data150\":\n                data = data150;\n                break;\n            case \"data50\":\n                data = data50;\n                break;\n        }\n    }\n\n    selectDataFromPlotMenu(value) {\n        this.setState((prev, current) => ({\n            dataSource: value,\n        }), () => {\n            console.log(\"DataSource changed:\", this.state.dataSource);\n            this.switchData();\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <HeaderMenu data={{\n                    \"menuData\": this.state.menuData,\n                    \"benchmarkToggle\": this.state.benchmarkToggle,\n                }} mutateMenu={this.LoadDataFromMenu}/>\n                <Cards data={this.state.cardData}/>\n                <CartesianPlot data={this.state.cartesianPlotData} mutateData={this.selectDataFromPlotMenu}\n                               changedData={this.LoadDataFromPlotMenuAgain}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}